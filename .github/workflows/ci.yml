name: Continuous Integration

on:
  push:
    branches: [ master, main ]

jobs:
  lint:
    runs-on: ubuntu-24.04

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-python@v5
      with: { python-version: "3.12" }

    - name: Install codespell
      run: pip3 install codespell

    - name: Lint
      run: cmake -D FORMAT_COMMAND=clang-format-18 -P cmake/lint.cmake

    - name: Spell check
      if: always()
      run: cmake -P cmake/spell.cmake

  coverage:
    runs-on: ubuntu-24.04

    if: github.repository_owner == 'mrdcvlsc'
      && false

    steps:
    - uses: actions/checkout@v4

    - name: Install linux dependencies
      run: sudo apt-get update && sudo apt-get install libxtst-dev libxinerama-dev libx11-dev libxfixes-dev libxrandr-dev libxcursor-dev libxi-dev libudev-dev libflac-dev libvorbis-dev libgl1-mesa-dev libegl1-mesa-dev libfreetype-dev

    - name: Install LCov
      run: sudo apt-get update -q
        && sudo apt-get install lcov -q -y

    - name: Configure
      run: cmake --preset=ci-coverage -Wno-error=dev

    - name: Build
      run: cmake --build build/coverage

    - name: Test
      working-directory: build/coverage
      run: ctest --output-on-failure --no-tests=error

    - name: Process coverage info
      run: cmake --build build/coverage -t coverage

    - name: Submit to codecov.io
      uses: codecov/codecov-action@v4
      with:
        file: build/coverage/coverage.info
        token: ${{ secrets.CODECOV_TOKEN }}

  sanitize:
    runs-on: ubuntu-24.04

    env: { CXX: clang++-18 }

    steps:
    - uses: actions/checkout@v4

    - name: Install linux dependencies
      run: sudo apt-get update && sudo apt-get install libxtst-dev libxinerama-dev libx11-dev libxfixes-dev libxrandr-dev libxcursor-dev libxi-dev libudev-dev libflac-dev libvorbis-dev libgl1-mesa-dev libegl1-mesa-dev libfreetype-dev

    - name: Configure
      run: cmake --preset=ci-sanitize -Wno-error=dev

    - name: Build
      run: cmake --build build/sanitize

    - name: Test
      working-directory: build/sanitize
      env:
        ASAN_OPTIONS: "strict_string_checks=1:\
          detect_stack_use_after_return=1:\
          check_initialization_order=1:\
          strict_init_order=1:\
          detect_leaks=1:\
          halt_on_error=1"
        UBSAN_OPTIONS: "print_stacktrace=1:\
          halt_on_error=1"
      run: ctest --output-on-failure --no-tests=error

  test:

    strategy:
      fail-fast: false
      matrix:
        os: [macos-14, ubuntu-24.04, windows-2022]

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Install linux dependencies
      if: runner.os == 'Linux'
      run: sudo apt-get update && sudo apt-get install libxtst-dev libxinerama-dev libx11-dev libxfixes-dev libxrandr-dev libxcursor-dev libxi-dev libudev-dev libflac-dev libvorbis-dev libgl1-mesa-dev libegl1-mesa-dev libfreetype-dev

    - name: Install static analyzers
      if: matrix.os == 'ubuntu-24.04'
      run: >-
        sudo apt-get install clang-tidy-18 cppcheck -y -q

        sudo update-alternatives --install
        /usr/bin/clang-tidy clang-tidy
        /usr/bin/clang-tidy-18 180

    - name: Setup MultiToolTask
      if: matrix.os == 'windows-2022'
      run: |
        Add-Content "$env:GITHUB_ENV" 'UseMultiToolTask=true'
        Add-Content "$env:GITHUB_ENV" 'EnforceProcessCountAcrossBuilds=true'

    - name: Configure
      shell: pwsh
      run: cmake "--preset=ci-$("${{ matrix.os }}".split("-")[0])" -Wno-error=dev
      # result: cmake "--preset=ci-ubuntu" -Wno-error=dev

    - name: Build
      run: cmake --build build --config Release

    - name: Install
      run: cmake --install build --config Release --prefix prefix

    - name: Test
      working-directory: build
      run: ctest --output-on-failure --no-tests=error -C Release